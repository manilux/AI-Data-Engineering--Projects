# SQL Query Performance Tuning

This guide outlines practical steps for optimizing query performance across major SQL environments.

---

## 1. Understand the Query

- **Check the Execution Plan:**  
  Use `EXPLAIN` or `EXPLAIN ANALYZE` to review the execution plan. This helps reveal if the database is scanning millions of rows when it could scan thousands.
- **Review Query Logic:**  
  Look for unnecessary joins, duplicate filters, or functions on indexed columns (which can prevent index usage).

---

## 2. Reduce Data Scanned

- **Filter Early:**  
  Push `WHERE` filters as close to the base tables as possible.
- **Select Only Needed Columns:**  
  Avoid `SELECT *`; fetch only the columns you need.
- **Use LIMIT for Testing:**  
  Use `LIMIT` to avoid scanning the entire table during development.

---

## 3. Indexing

- **Create Indexes:**  
  Add indexes to columns frequently used in filters or joins.
- **Use Composite Indexes:**  
  If you often filter or sort by multiple columns together, use composite indexes.
- **Avoid Over-Indexing:**  
  Too many indexes can slow down writes.

---

## 4. Optimize Joins

- **Join on Indexed Columns:**  
  Prefer joining on primary keys or foreign keys.
- **Ensure Data Type Match:**  
  Join keys should have matching data types.
- **Join Smaller Tables First (Inner Joins):**  
  Improves efficiency, especially on large datasets.
- **Consider Semi-Joins (`EXISTS`):**  
  Use `EXISTS` or `IN` for filtering instead of large joins when appropriate.

---

## 5. Aggregate Smarter

- **Pre-Aggregate in CTEs or Temp Tables:**  
  This avoids recalculating sums/counts repeatedly.
- **Use GROUP BY Instead of Window Functions:**  
  Window functions can be slower; a simple `GROUP BY` may suffice.

---

## 6. Watch Out for Expensive Operations

- **Avoid Functions on Columns in WHERE:**  
  For example, rewrite `WHERE YEAR(date) = 2024` as `WHERE date BETWEEN '2024-01-01' AND '2024-12-31'`.  
  Functions on columns can prevent index usage.
- **Avoid DISTINCT Unless Necessary:**  
  Often, `GROUP BY` is faster.
- **Reduce OR Conditions:**  
  Use `IN` or `UNION ALL` instead of multiple `OR` conditions when possible.

---

## 7. Use Caching & Preprocessing

- **Cache Frequent Query Results:**  
  Use materialized views or summary tables for common queries.
- **Preprocess Heavy Computation:**  
  Schedule ETL jobs to handle heavy calculations outside of query time.

---

## 8. Database-Specific Tweaks

- **Snowflake:**  
  Use clustering keys, avoid small micro-partitions, and leverage result caching.
- **Spark SQL:**  
  Filter early, repartition smartly, and avoid excessive shuffles.

---
